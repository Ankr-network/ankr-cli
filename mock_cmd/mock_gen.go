// Code generated by MockGen. DO NOT EDIT.
// Source: mock.go

// Package mock_cmd is a generated GoMock package.
package mock_cmd

import (
	gomock "github.com/golang/mock/gomock"
	types "github.com/tendermint/tendermint/rpc/core/types"
	io "io"
	reflect "reflect"
)

// MockTerminal is a mock of Terminal interface
type MockTerminal struct {
	ctrl     *gomock.Controller
	recorder *MockTerminalMockRecorder
}

// MockTerminalMockRecorder is the mock recorder for MockTerminal
type MockTerminalMockRecorder struct {
	mock *MockTerminal
}

// NewMockTerminal creates a new mock instance
func NewMockTerminal(ctrl *gomock.Controller) *MockTerminal {
	mock := &MockTerminal{ctrl: ctrl}
	mock.recorder = &MockTerminalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTerminal) EXPECT() *MockTerminalMockRecorder {
	return m.recorder
}

// ReadPassword mocks base method
func (m *MockTerminal) ReadPassword(fd int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPassword", fd)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPassword indicates an expected call of ReadPassword
func (mr *MockTerminalMockRecorder) ReadPassword(fd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPassword", reflect.TypeOf((*MockTerminal)(nil).ReadPassword), fd)
}

// MockFmt is a mock of Fmt interface
type MockFmt struct {
	ctrl     *gomock.Controller
	recorder *MockFmtMockRecorder
}

// MockFmtMockRecorder is the mock recorder for MockFmt
type MockFmtMockRecorder struct {
	mock *MockFmt
}

// NewMockFmt creates a new mock instance
func NewMockFmt(ctrl *gomock.Controller) *MockFmt {
	mock := &MockFmt{ctrl: ctrl}
	mock.recorder = &MockFmtMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFmt) EXPECT() *MockFmtMockRecorder {
	return m.recorder
}

// Fprintf mocks base method
func (m *MockFmt) Fprintf(w io.Writer, format string, a ...interface{}) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{w, format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Fprintf", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fprintf indicates an expected call of Fprintf
func (mr *MockFmtMockRecorder) Fprintf(w, format interface{}, a ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{w, format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fprintf", reflect.TypeOf((*MockFmt)(nil).Fprintf), varargs...)
}

// Println mocks base method
func (m *MockFmt) Println(a ...interface{}) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Println", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Println indicates an expected call of Println
func (mr *MockFmtMockRecorder) Println(a ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Println", reflect.TypeOf((*MockFmt)(nil).Println), a...)
}

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Genesis mocks base method
func (m *MockClient) Genesis() (*types.ResultGenesis, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Genesis")
	ret0, _ := ret[0].(*types.ResultGenesis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Genesis indicates an expected call of Genesis
func (mr *MockClientMockRecorder) Genesis() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Genesis", reflect.TypeOf((*MockClient)(nil).Genesis))
}

// Tx mocks base method
func (m *MockClient) Tx(hash []byte, prove bool) (*types.ResultTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tx", hash, prove)
	ret0, _ := ret[0].(*types.ResultTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tx indicates an expected call of Tx
func (mr *MockClientMockRecorder) Tx(hash, prove interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockClient)(nil).Tx), hash, prove)
}

// Block mocks base method
func (m *MockClient) Block(height *int64) (*types.ResultBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Block", height)
	ret0, _ := ret[0].(*types.ResultBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Block indicates an expected call of Block
func (mr *MockClientMockRecorder) Block(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Block", reflect.TypeOf((*MockClient)(nil).Block), height)
}

// Validators mocks base method
func (m *MockClient) Validators(height *int64) (*types.ResultValidators, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validators", height)
	ret0, _ := ret[0].(*types.ResultValidators)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validators indicates an expected call of Validators
func (mr *MockClientMockRecorder) Validators(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validators", reflect.TypeOf((*MockClient)(nil).Validators), height)
}

// Status mocks base method
func (m *MockClient) Status() (*types.ResultStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(*types.ResultStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status
func (mr *MockClientMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockClient)(nil).Status))
}
