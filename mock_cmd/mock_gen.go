// Code generated by MockGen. DO NOT EDIT.
// Source: mock.go

// Package mock_cmd is a generated GoMock package.
package mock_cmd

import (
	gomock "github.com/golang/mock/gomock"
	client "github.com/tendermint/tendermint/rpc/client"
	types "github.com/tendermint/tendermint/rpc/core/types"
	io "io"
	reflect "reflect"
)

// MockTerminal is a mock of Terminal interface
type MockTerminal struct {
	ctrl     *gomock.Controller
	recorder *MockTerminalMockRecorder
}

// MockTerminalMockRecorder is the mock recorder for MockTerminal
type MockTerminalMockRecorder struct {
	mock *MockTerminal
}

// NewMockTerminal creates a new mock instance
func NewMockTerminal(ctrl *gomock.Controller) *MockTerminal {
	mock := &MockTerminal{ctrl: ctrl}
	mock.recorder = &MockTerminalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTerminal) EXPECT() *MockTerminalMockRecorder {
	return m.recorder
}

// ReadPassword mocks base method
func (m *MockTerminal) ReadPassword(fd int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPassword", fd)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPassword indicates an expected call of ReadPassword
func (mr *MockTerminalMockRecorder) ReadPassword(fd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPassword", reflect.TypeOf((*MockTerminal)(nil).ReadPassword), fd)
}

// MockFmt is a mock of Fmt interface
type MockFmt struct {
	ctrl     *gomock.Controller
	recorder *MockFmtMockRecorder
}

// MockFmtMockRecorder is the mock recorder for MockFmt
type MockFmtMockRecorder struct {
	mock *MockFmt
}

// NewMockFmt creates a new mock instance
func NewMockFmt(ctrl *gomock.Controller) *MockFmt {
	mock := &MockFmt{ctrl: ctrl}
	mock.recorder = &MockFmtMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFmt) EXPECT() *MockFmtMockRecorder {
	return m.recorder
}

// Fprintf mocks base method
func (m *MockFmt) Fprintf(w io.Writer, format string, a ...interface{}) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{w, format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Fprintf", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fprintf indicates an expected call of Fprintf
func (mr *MockFmtMockRecorder) Fprintf(w, format interface{}, a ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{w, format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fprintf", reflect.TypeOf((*MockFmt)(nil).Fprintf), varargs...)
}

// Println mocks base method
func (m *MockFmt) Println(a ...interface{}) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Println", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Println indicates an expected call of Println
func (mr *MockFmtMockRecorder) Println(a ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Println", reflect.TypeOf((*MockFmt)(nil).Println), a...)
}

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Genesis mocks base method
func (m *MockClient) Genesis() (*types.ResultGenesis, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Genesis")
	ret0, _ := ret[0].(*types.ResultGenesis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Genesis indicates an expected call of Genesis
func (mr *MockClientMockRecorder) Genesis() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Genesis", reflect.TypeOf((*MockClient)(nil).Genesis))
}

// Tx mocks base method
func (m *MockClient) Tx(hash []byte, prove bool) (*types.ResultTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tx", hash, prove)
	ret0, _ := ret[0].(*types.ResultTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tx indicates an expected call of Tx
func (mr *MockClientMockRecorder) Tx(hash, prove interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockClient)(nil).Tx), hash, prove)
}

// Block mocks base method
func (m *MockClient) Block(height *int64) (*types.ResultBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Block", height)
	ret0, _ := ret[0].(*types.ResultBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Block indicates an expected call of Block
func (mr *MockClientMockRecorder) Block(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Block", reflect.TypeOf((*MockClient)(nil).Block), height)
}

// Validators mocks base method
func (m *MockClient) Validators(height *int64) (*types.ResultValidators, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validators", height)
	ret0, _ := ret[0].(*types.ResultValidators)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validators indicates an expected call of Validators
func (mr *MockClientMockRecorder) Validators(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validators", reflect.TypeOf((*MockClient)(nil).Validators), height)
}

// Status mocks base method
func (m *MockClient) Status() (*types.ResultStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(*types.ResultStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status
func (mr *MockClientMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockClient)(nil).Status))
}

// TxSearch mocks base method
func (m *MockClient) TxSearch(c *client.HTTP, query string, prove bool, page, perPage int) (*types.ResultTxSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxSearch", c, query, prove, page, perPage)
	ret0, _ := ret[0].(*types.ResultTxSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxSearch indicates an expected call of TxSearch
func (mr *MockClientMockRecorder) TxSearch(c, query, prove, page, perPage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxSearch", reflect.TypeOf((*MockClient)(nil).TxSearch), c, query, prove, page, perPage)
}

// MockWallet is a mock of Wallet interface
type MockWallet struct {
	ctrl     *gomock.Controller
	recorder *MockWalletMockRecorder
}

// MockWalletMockRecorder is the mock recorder for MockWallet
type MockWalletMockRecorder struct {
	mock *MockWallet
}

// NewMockWallet creates a new mock instance
func NewMockWallet(ctrl *gomock.Controller) *MockWallet {
	mock := &MockWallet{ctrl: ctrl}
	mock.recorder = &MockWalletMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWallet) EXPECT() *MockWalletMockRecorder {
	return m.recorder
}

// GenerateKeys mocks base method
func (m *MockWallet) GenerateKeys() (string, string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateKeys")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	return ret0, ret1, ret2
}

// GenerateKeys indicates an expected call of GenerateKeys
func (mr *MockWalletMockRecorder) GenerateKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateKeys", reflect.TypeOf((*MockWallet)(nil).GenerateKeys))
}

// GetBalance mocks base method
func (m *MockWallet) GetBalance(ip, port, address string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ip, port, address)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance
func (mr *MockWalletMockRecorder) GetBalance(ip, port, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockWallet)(nil).GetBalance), ip, port, address)
}

// SetStake mocks base method
func (m *MockWallet) SetStake(ip, port, privKey, amount, pubKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStake", ip, port, privKey, amount, pubKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStake indicates an expected call of SetStake
func (mr *MockWalletMockRecorder) SetStake(ip, port, privKey, amount, pubKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStake", reflect.TypeOf((*MockWallet)(nil).SetStake), ip, port, privKey, amount, pubKey)
}

// RemoveValidator mocks base method
func (m *MockWallet) RemoveValidator(ip, port, pubKey, privKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveValidator", ip, port, pubKey, privKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveValidator indicates an expected call of RemoveValidator
func (mr *MockWalletMockRecorder) RemoveValidator(ip, port, pubKey, privKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveValidator", reflect.TypeOf((*MockWallet)(nil).RemoveValidator), ip, port, pubKey, privKey)
}

// RemoveMeteringCert mocks base method
func (m *MockWallet) RemoveMeteringCert(ip, port, privKey, dcName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMeteringCert", ip, port, privKey, dcName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMeteringCert indicates an expected call of RemoveMeteringCert
func (mr *MockWalletMockRecorder) RemoveMeteringCert(ip, port, privKey, dcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMeteringCert", reflect.TypeOf((*MockWallet)(nil).RemoveMeteringCert), ip, port, privKey, dcName)
}

// SetBalance mocks base method
func (m *MockWallet) SetBalance(ip, port, address, amount, privKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBalance", ip, port, address, amount, privKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBalance indicates an expected call of SetBalance
func (mr *MockWalletMockRecorder) SetBalance(ip, port, address, amount, privKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBalance", reflect.TypeOf((*MockWallet)(nil).SetBalance), ip, port, address, amount, privKey)
}

// SetMeteringCert mocks base method
func (m *MockWallet) SetMeteringCert(ip, port, privKey, dc_name, cert_pem string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMeteringCert", ip, port, privKey, dc_name, cert_pem)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMeteringCert indicates an expected call of SetMeteringCert
func (mr *MockWalletMockRecorder) SetMeteringCert(ip, port, privKey, dc_name, cert_pem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMeteringCert", reflect.TypeOf((*MockWallet)(nil).SetMeteringCert), ip, port, privKey, dc_name, cert_pem)
}

// SetValidator mocks base method
func (m *MockWallet) SetValidator(ip, port, pubKey, power, privKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValidator", ip, port, pubKey, power, privKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValidator indicates an expected call of SetValidator
func (mr *MockWalletMockRecorder) SetValidator(ip, port, pubKey, power, privKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidator", reflect.TypeOf((*MockWallet)(nil).SetValidator), ip, port, pubKey, power, privKey)
}

// SendCoins mocks base method
func (m *MockWallet) SendCoins(ip, port, privKey, from, to, amount string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoins", ip, port, privKey, from, to, amount)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendCoins indicates an expected call of SendCoins
func (mr *MockWalletMockRecorder) SendCoins(ip, port, privKey, from, to, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoins", reflect.TypeOf((*MockWallet)(nil).SendCoins), ip, port, privKey, from, to, amount)
}

// SetMetering mocks base method
func (m *MockWallet) SetMetering(ip, port, privKey, dc, ns, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMetering", ip, port, privKey, dc, ns, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMetering indicates an expected call of SetMetering
func (mr *MockWalletMockRecorder) SetMetering(ip, port, privKey, dc, ns, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMetering", reflect.TypeOf((*MockWallet)(nil).SetMetering), ip, port, privKey, dc, ns, value)
}

// MockWriteCloser is a mock of WriteCloser interface
type MockWriteCloser struct {
	ctrl     *gomock.Controller
	recorder *MockWriteCloserMockRecorder
}

// MockWriteCloserMockRecorder is the mock recorder for MockWriteCloser
type MockWriteCloserMockRecorder struct {
	mock *MockWriteCloser
}

// NewMockWriteCloser creates a new mock instance
func NewMockWriteCloser(ctrl *gomock.Controller) *MockWriteCloser {
	mock := &MockWriteCloser{ctrl: ctrl}
	mock.recorder = &MockWriteCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWriteCloser) EXPECT() *MockWriteCloserMockRecorder {
	return m.recorder
}

// Write mocks base method
func (m *MockWriteCloser) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockWriteCloserMockRecorder) Write(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockWriteCloser)(nil).Write), p)
}

// Close mocks base method
func (m *MockWriteCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockWriteCloserMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWriteCloser)(nil).Close))
}
